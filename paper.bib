@phdthesis{Singh2019,
  doi = {10.18174/505685},
  url = {https://doi.org/10.18174/505685},
  publisher = {Wageningen University and Research},
  author = {Gurnoor Singh},
  title = {Genomics data integration for knowledge discovery using genome annotations from molecular databases and scientific literature}
}

@InProceedings{Merono_ISWC2016,
author="Mero{\~{n}}o-Pe{\~{n}}uela, Albert
and Hoekstra, Rinke",
editor="Sack, Harald
and Rizzo, Giuseppe
and Steinmetz, Nadine
and Mladeni{\'{c}}, Dunja
and Auer, S{\"o}ren
and Lange, Christoph",
title="grlc Makes GitHub Taste Like Linked Data APIs",
booktitle="The Semantic Web",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="342--353",
abstract="Building Web APIs on top of SPARQL endpoints is becoming common practice. It enables universal access to the integration favorable data space of Linked Data. In the majority of use cases, users cannot be expected to learn SPARQL to query this data space. Web APIs are the most common way to enable programmatic access to data on the Web. However, the implementation of Web APIs around Linked Data is often a tedious and repetitive process. Recent work speeds up this Linked Data API construction by wrapping it around SPARQL queries, which carry out the API functionality under the hood. Inspired by this development, in this paper we present grlc, a lightweight server that takes SPARQL queries curated in GitHub repositories, and translates them to Linked Data APIs on the fly.",
isbn="978-3-319-47602-5"
}

@InProceedings{Merono_ESWC2017,
author="Mero{\~{n}}o-Pe{\~{n}}uela, Albert
and Hoekstra, Rinke",
editor="Blomqvist, Eva
and Hose, Katja
and Paulheim, Heiko
and {\L}awrynowicz, Agnieszka
and Ciravegna, Fabio
and Hartig, Olaf",
title="SPARQL2Git: Transparent SPARQL and Linked Data API Curation via Git",
booktitle="The Semantic Web: ESWC 2017 Satellite Events",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="143--148",
abstract="In this demo, we show how an effective and application agnostic way of curating SPARQL queries can be achieved by leveraging Git-based architectures. Often, SPARQL queries are hard-coded into Linked Data consuming applications. This tight coupling poses issues in code maintainability, since these queries are prone to change to adapt to new situations; and query reuse, since queries that might be useful in other applications remain inaccessible. In order to enable decoupling, version control, availability and accessibility of SPARQL queries, we propose SPARQL2Git, an interface for editing, curating and storing SPARQL queries that uses cloud based Git repositories (such as GitHub) as a backend. We describe the query management capabilities of SPARQL2Git, its convenience for SPARQL users that lack Git knowledge, and its combination with grlc to easily generate Linked Data APIs.",
isbn="978-3-319-70407-4"
}

@InProceedings{Merono_ISWC2017,
author="Mero{\~{n}}o-Pe{\~{n}}uela, Albert
and Hoekstra, Rinke",
editor="d'Amato, Claudia
and Fernandez, Miriam
and Tamma, Valentina
and Lecue, Freddy
and Cudr{\'e}-Mauroux, Philippe
and Sequeda, Juan
and Lange, Christoph
and Heflin, Jeff",
title="Automatic Query-Centric API for Routine Access to Linked Data",
booktitle="The Semantic Web -- ISWC 2017",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="334--349",
abstract="Despite the advatages of Linked Data as a data integration paradigm, accessing and consuming Linked Data is still a cumbersome task. Linked Data applications need to use technologies such as RDF and SPARQL that, despite their expressive power, belong to the data integration stack. As a result, applications and data cannot be cleanly separated: SPARQL queries, endpoint addresses, namespaces, and URIs end up as part of the application code. Many publishers address these problems by building RESTful APIs around their Linked Data. However, this solution has two pitfalls: these APIs are costly to maintain; and they blackbox functionality by hiding the queries they use. In this paper we describe grlc, a gateway between Linked Data applications and the LOD cloud that offers a RESTful, reusable and uniform means to routinely access any Linked Data. It generates an OpenAPI compatible API by using parametrized queries shared on the Web. The resulting APIs require no coding, rely on low-cost external query storage and versioning services, contain abundant provenance information, and integrate access to different publishing paradigms into a single API. We evaluate grlc qualitatively, by describing its reported value by current users; and quantitatively, by measuring the added overhead at generating API specifications and answering to calls.",
isbn="978-3-319-68204-4"
}
